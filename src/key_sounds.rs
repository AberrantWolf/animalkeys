use kira::sound::static_sound::StaticSoundData;
use rdev::Key::{self, *};

pub struct KeySounds {
    sound_a: StaticSoundData,
    sound_b: StaticSoundData,
    sound_c: StaticSoundData,
    sound_d: StaticSoundData,
    sound_e: StaticSoundData,
    sound_f: StaticSoundData,
    sound_g: StaticSoundData,
    sound_h: StaticSoundData,
    sound_i: StaticSoundData,
    sound_j: StaticSoundData,
    sound_k: StaticSoundData,
    sound_l: StaticSoundData,
    sound_m: StaticSoundData,
    sound_n: StaticSoundData,
    sound_o: StaticSoundData,
    sound_p: StaticSoundData,
    sound_q: StaticSoundData,
    sound_r: StaticSoundData,
    sound_s: StaticSoundData,
    sound_t: StaticSoundData,
    sound_u: StaticSoundData,
    sound_v: StaticSoundData,
    sound_w: StaticSoundData,
    sound_x: StaticSoundData,
    sound_y: StaticSoundData,
    sound_z: StaticSoundData,
    sound_0: StaticSoundData,
    sound_1: StaticSoundData,
    sound_2: StaticSoundData,
    sound_3: StaticSoundData,
    sound_4: StaticSoundData,
    sound_5: StaticSoundData,
    sound_6: StaticSoundData,
    sound_7: StaticSoundData,
    sound_8: StaticSoundData,
    sound_9: StaticSoundData,
}

impl KeySounds {
    pub fn new() -> Self {
        Self {
            sound_a: StaticSoundData::from_file("sounds/a.ogg").expect("ACK"),
            sound_b: StaticSoundData::from_file("sounds/b.ogg").expect("ACK"),
            sound_c: StaticSoundData::from_file("sounds/c.ogg").expect("ACK"),
            sound_d: StaticSoundData::from_file("sounds/d.ogg").expect("ACK"),
            sound_e: StaticSoundData::from_file("sounds/e.ogg").expect("ACK"),
            sound_f: StaticSoundData::from_file("sounds/f.ogg").expect("ACK"),
            sound_g: StaticSoundData::from_file("sounds/g.ogg").expect("ACK"),
            sound_h: StaticSoundData::from_file("sounds/h.ogg").expect("ACK"),
            sound_i: StaticSoundData::from_file("sounds/i.ogg").expect("ACK"),
            sound_j: StaticSoundData::from_file("sounds/j.ogg").expect("ACK"),
            sound_k: StaticSoundData::from_file("sounds/k.ogg").expect("ACK"),
            sound_l: StaticSoundData::from_file("sounds/l.ogg").expect("ACK"),
            sound_m: StaticSoundData::from_file("sounds/m.ogg").expect("ACK"),
            sound_n: StaticSoundData::from_file("sounds/n.ogg").expect("ACK"),
            sound_o: StaticSoundData::from_file("sounds/o.ogg").expect("ACK"),
            sound_p: StaticSoundData::from_file("sounds/p.ogg").expect("ACK"),
            sound_q: StaticSoundData::from_file("sounds/q.ogg").expect("ACK"),
            sound_r: StaticSoundData::from_file("sounds/r.ogg").expect("ACK"),
            sound_s: StaticSoundData::from_file("sounds/s.ogg").expect("ACK"),
            sound_t: StaticSoundData::from_file("sounds/t.ogg").expect("ACK"),
            sound_u: StaticSoundData::from_file("sounds/u.ogg").expect("ACK"),
            sound_v: StaticSoundData::from_file("sounds/v.ogg").expect("ACK"),
            sound_w: StaticSoundData::from_file("sounds/w.ogg").expect("ACK"),
            sound_x: StaticSoundData::from_file("sounds/x.ogg").expect("ACK"),
            sound_y: StaticSoundData::from_file("sounds/y.ogg").expect("ACK"),
            sound_z: StaticSoundData::from_file("sounds/z.ogg").expect("ACK"),
            sound_0: StaticSoundData::from_file("sounds/0.ogg").expect("ACK"),
            sound_1: StaticSoundData::from_file("sounds/1.ogg").expect("ACK"),
            sound_2: StaticSoundData::from_file("sounds/2.ogg").expect("ACK"),
            sound_3: StaticSoundData::from_file("sounds/3.ogg").expect("ACK"),
            sound_4: StaticSoundData::from_file("sounds/4.ogg").expect("ACK"),
            sound_5: StaticSoundData::from_file("sounds/5.ogg").expect("ACK"),
            sound_6: StaticSoundData::from_file("sounds/6.ogg").expect("ACK"),
            sound_7: StaticSoundData::from_file("sounds/7.ogg").expect("ACK"),
            sound_8: StaticSoundData::from_file("sounds/8.ogg").expect("ACK"),
            sound_9: StaticSoundData::from_file("sounds/9.ogg").expect("ACK"),
        }
    }

    pub fn sound_for_key(&self, key_press: Key) -> Option<StaticSoundData> {
        match key_press {
            KeyA => Some(self.sound_a.clone()),
            KeyB => Some(self.sound_b.clone()),
            KeyC => Some(self.sound_c.clone()),
            KeyD => Some(self.sound_d.clone()),
            KeyE => Some(self.sound_e.clone()),
            KeyF => Some(self.sound_f.clone()),
            KeyG => Some(self.sound_g.clone()),
            KeyH => Some(self.sound_h.clone()),
            KeyI => Some(self.sound_i.clone()),
            KeyJ => Some(self.sound_j.clone()),
            KeyK => Some(self.sound_k.clone()),
            KeyL => Some(self.sound_l.clone()),
            KeyM => Some(self.sound_m.clone()),
            KeyN => Some(self.sound_n.clone()),
            KeyO => Some(self.sound_o.clone()),
            KeyP => Some(self.sound_p.clone()),
            KeyQ => Some(self.sound_q.clone()),
            KeyR => Some(self.sound_r.clone()),
            KeyS => Some(self.sound_s.clone()),
            KeyT => Some(self.sound_t.clone()),
            KeyU => Some(self.sound_u.clone()),
            KeyV => Some(self.sound_v.clone()),
            KeyW => Some(self.sound_w.clone()),
            KeyX => Some(self.sound_x.clone()),
            KeyY => Some(self.sound_y.clone()),
            KeyZ => Some(self.sound_z.clone()),
            Num0 => Some(self.sound_0.clone()),
            Num1 => Some(self.sound_1.clone()),
            Num2 => Some(self.sound_2.clone()),
            Num3 => Some(self.sound_3.clone()),
            Num4 => Some(self.sound_4.clone()),
            Num5 => Some(self.sound_5.clone()),
            Num6 => Some(self.sound_6.clone()),
            Num7 => Some(self.sound_7.clone()),
            Num8 => Some(self.sound_8.clone()),
            Num9 => Some(self.sound_9.clone()),
            _ => None,
        }
    }
}
